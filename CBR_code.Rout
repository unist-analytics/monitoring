
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ####################### set up working directory  ##################################################
> setwd(file.path("E:/opencode/input"))
> 
> ######################## read training and testing dataset #########################################
> 
> 
> training=read.csv("training_98473.csv", header=T)
> testing=read.csv("testing_98473.csv", header=T)
> names(training)[2]="POL_ETD"
> names(testing)[2]="POL_ETD"
> 
> #check_list=c("ACT_ROUTE_ID","ARRIVAL_PORT","CARR_ID","CNEE_ID","FINAL_DEST","LANE_ID","LSP_ID","LOADING_PORT","SHPR_PLANT_CD","ITEM_CD")
> 
> ############################ Feature Selection using RPART #########################################
> 
> library(rpart)
> library(partykit)
Loading required package: grid
> 
> 
> #If you want to add additional features, add them to training and testing dataset
> POL_D=as.numeric(as.Date(training$POL_ETD)<as.Date(training$POL_ATD))
> num.stopby=
+   as.numeric(training$X3RD_TS_LOC!="NULL")*3+
+   as.numeric((training$X3RD_TS_LOC=="NULL")&(training$X2ND_TS_LOC!="NULL"))*2+
+   as.numeric((training$X3RD_TS_LOC=="NULL")&(training$X2ND_TS_LOC=="NULL")&(training$X1ST_TS_LOC!="NULL"))*1+
+   as.numeric((training$X3RD_TS_LOC=="NULL")&(training$X2ND_TS_LOC=="NULL")&(training$X1ST_TS_LOC=="NULL"))*0
> 
> 
> training=cbind(training,POL_D,num.stopby)
> 
> ## This is all features after removing unrelated time-related features. We will select among them. ###
> 
> features=c("ACT_ROUTE_ID","ARRIVAL_PORT","CARR_ID","CNEE_ID","FINAL_DEST","LANE_ID","LSP_ID","LOADING_PORT","SHPR_PLANT_CD"
+              ,"X1ST_TS_LOC"
+              ,"X2ND_TS_LOC"
+              ,"X3RD_TS_LOC"
+              ,"BOD_ID"
+              ,"CORP_ID"
+              ,"DIR_PRGS_YN"
+              ,"FI_PAY_COND_CD"
+              ,"INCO_CD"
+              ,"POD_LOC"
+              ,"SHPR_ID"
+              ,"SHPR_PLANT_CD"
+              ,"VESSLE_NAME"
+              ,"VOYAGE_NO"
+              ,"ITEM_CD","POL_D","num.stopby")
> 
> y=as.numeric(as.Date(training$BL_LAST_ETA_DATETIME) < as.Date(training$POD_ATA))
> training_y=cbind(training[,features],y)
> fit <- rpart(y ~ ., data = training_y,parms=list(split='information'))
> 
> 
> check_list=names(fit$variable.importance)
> #check_list=c("VOYAGE_NO","ITEM_CD","ACT_ROUTE_ID", "BOD_ID" ,"VESSLE_NAME","LANE_ID", "CNEE_ID","FINAL_DEST","LSP_ID","CARR_ID")
> 
> 
> 
> 
> 
> 
> ######################################################################
> 
> 
> comparison=c()
> 
> for(j in 1:nrow(testing)){
+ 
+ 	values=as.matrix(testing[j,check_list])  # new case feature values
+ 	similar_cases=training_y
+ 
+ 	for(i in 1:length(values)){
+ 		if(sum(similar_cases[,check_list[i]]==values[i])>0){             # The size of similar cases should be >0 
+ 		  similar_cases=similar_cases[similar_cases[,check_list[i]]==values[i],]  # similar cases
+ 		}
+ 	}
+ 
+ 	prob_delay=sum(similar_cases$y==1)/nrow(similar_cases)  ## calculate probability of delay
+ 	testing_delay=as.numeric(as.Date(testing[j,"BL_LAST_ETA_DATETIME"]) < as.Date(testing[j,"POD_ATA"])) # delay or not from testing dataset, delay ==> 1
+ 
+ 	pred_s_or_f=as.numeric(prob_delay>0.5)  # 0 or 1
+ 	
+   # This is for comparison as the thresholds
+ 	experiments=c()
+ 	for(thresholds in seq(0.2,0.8,0.05)){
+ 		experiments=c(experiments,as.numeric(prob_delay>thresholds))
+ 	}
+ 	comparison=rbind(comparison,c(pred_s_or_f,testing_delay,nrow(similar_cases),experiments))
+ }
> 
> comparison[,1:3]
       [,1] [,2] [,3]
  [1,]    0    0    2
  [2,]    0    0    3
  [3,]    0    1    1
  [4,]    0    0    3
  [5,]    1    0    5
  [6,]    0    0    3
  [7,]    0    0    2
  [8,]    0    0    4
  [9,]    0    0    8
 [10,]    0    0    2
 [11,]    0    0    3
 [12,]    1    1    1
 [13,]    0    0    1
 [14,]    0    0    8
 [15,]    0    0    1
 [16,]    0    0    5
 [17,]    0    0    2
 [18,]    0    0    2
 [19,]    0    0   20
 [20,]    0    0    1
 [21,]    0    0    6
 [22,]    0    0    1
 [23,]    0    0    2
 [24,]    0    0    9
 [25,]    0    0    1
 [26,]    1    1    8
 [27,]    0    0   35
 [28,]    1    1    3
 [29,]    1    1    1
 [30,]    0    0    4
 [31,]    0    0    1
 [32,]    0    0    1
 [33,]    1    1   38
 [34,]    0    0    3
 [35,]    0    0    1
 [36,]    0    0    1
 [37,]    0    0    2
 [38,]    0    0    6
 [39,]    0    0    1
 [40,]    0    0    1
 [41,]    0    0    2
 [42,]    0    0    5
 [43,]    0    0    2
 [44,]    0    0    1
 [45,]    0    0    2
 [46,]    1    0    1
 [47,]    0    0    5
 [48,]    0    0    6
 [49,]    0    0    1
 [50,]    0    0    4
 [51,]    0    0    2
 [52,]    0    0    4
 [53,]    0    0    1
 [54,]    1    1    2
 [55,]    0    0   12
 [56,]    0    0    1
 [57,]    0    0    5
 [58,]    0    0    2
 [59,]    0    0    7
 [60,]    0    0    3
 [61,]    0    0    2
 [62,]    0    0    1
 [63,]    0    0    8
 [64,]    0    0    1
 [65,]    0    0    3
 [66,]    0    0    1
 [67,]    1    0    1
 [68,]    0    0    1
 [69,]    0    0    1
 [70,]    0    0    1
 [71,]    0    0    1
 [72,]    0    0    1
 [73,]    0    0    2
 [74,]    0    0    1
 [75,]    0    0    4
 [76,]    0    0    1
 [77,]    0    0    3
 [78,]    0    0    1
 [79,]    0    0    1
 [80,]    0    0    1
 [81,]    0    0    6
 [82,]    1    1    4
 [83,]    0    0    4
 [84,]    0    0    2
 [85,]    0    0    2
 [86,]    0    0    2
 [87,]    1    0    6
 [88,]    0    0    2
 [89,]    0    0    1
 [90,]    0    0    2
 [91,]    0    0    1
 [92,]    0    0    1
 [93,]    0    0    1
 [94,]    0    0   10
 [95,]    0    0    2
 [96,]    0    1    1
 [97,]    0    0    2
 [98,]    0    0    1
 [99,]    0    0    4
[100,]    0    0    2
[101,]    0    0   14
[102,]    0    0   12
[103,]    0    0    8
[104,]    0    0    2
[105,]    0    0   11
[106,]    0    0    3
[107,]    0    0    4
[108,]    0    0    5
[109,]    0    0    1
[110,]    0    0    3
[111,]    0    0    3
[112,]    0    0    3
[113,]    0    1   18
[114,]    0    0    3
[115,]    0    0    6
[116,]    0    0    2
[117,]    0    0    2
[118,]    0    0    1
[119,]    0    0    3
[120,]    0    0    2
[121,]    0    0   14
[122,]    0    0    2
[123,]    0    0    1
[124,]    0    0    1
[125,]    0    0    2
[126,]    0    0    1
[127,]    1    1    1
[128,]    0    0    2
[129,]    0    0    1
[130,]    0    0   59
[131,]    0    1    5
[132,]    0    0    2
[133,]    1    1    1
[134,]    0    0    6
[135,]    0    0    1
[136,]    0    0    3
[137,]    1    1    1
[138,]    0    0    1
[139,]    0    0    1
[140,]    0    0    7
[141,]    0    0    2
[142,]    0    0    3
[143,]    0    0    1
[144,]    0    0    2
[145,]    0    0    1
[146,]    0    0   10
[147,]    0    1   18
[148,]    0    0    2
[149,]    0    0    1
[150,]    0    0    1
[151,]    0    0    1
[152,]    0    0    6
[153,]    1    1    1
[154,]    0    0    1
[155,]    0    0    1
[156,]    0    1    2
[157,]    0    0    1
[158,]    0    0    1
[159,]    0    0    7
[160,]    0    0    4
[161,]    1    1    8
[162,]    0    0    2
[163,]    0    0    4
[164,]    0    0    1
[165,]    0    0    2
[166,]    0    0    5
[167,]    0    0    2
[168,]    1    1   33
[169,]    0    0    5
[170,]    1    1   15
[171,]    0    0    4
[172,]    0    0    3
[173,]    1    0   15
[174,]    1    1    1
[175,]    0    0    6
[176,]    0    0    1
[177,]    1    1    1
[178,]    0    0    1
[179,]    0    0    3
[180,]    0    0    4
[181,]    0    0    1
[182,]    0    0    1
[183,]    0    1    1
[184,]    0    0    1
[185,]    1    1    1
[186,]    0    0    3
[187,]    0    0    2
[188,]    1    1    2
[189,]    1    1    3
[190,]    1    1   22
[191,]    1    0    3
[192,]    0    0    1
[193,]    0    0    1
[194,]    0    0    4
[195,]    0    0    1
[196,]    0    0    1
[197,]    0    0    2
[198,]    0    0    1
[199,]    0    0    5
[200,]    0    0    7
[201,]    1    1   10
[202,]    0    0    3
[203,]    0    0   16
[204,]    0    0   20
[205,]    0    0   11
[206,]    0    0    1
[207,]    0    1    2
[208,]    0    0    1
[209,]    0    0   10
[210,]    0    0    1
[211,]    0    0    1
[212,]    0    0    1
[213,]    0    0    4
[214,]    0    0    5
[215,]    0    0    3
[216,]    1    1    2
[217,]    0    0    1
[218,]    0    0    1
[219,]    0    0    1
[220,]    0    0    4
[221,]    0    1    2
[222,]    1    1    1
[223,]    0    0    1
[224,]    0    0   31
[225,]    0    0    1
[226,]    0    0    3
[227,]    0    0    2
[228,]    1    1    1
[229,]    1    1   24
[230,]    1    0   15
[231,]    0    1    6
[232,]    0    1    3
[233,]    0    0    7
[234,]    0    0    1
[235,]    0    0    1
[236,]    0    0   18
[237,]    0    0    4
[238,]    0    0    1
[239,]    0    0    2
[240,]    0    0    1
[241,]    0    0    1
[242,]    0    0    1
[243,]    0    0    1
[244,]    0    0    1
[245,]    1    1    1
[246,]    1    1    6
[247,]    1    0    1
[248,]    0    0    3
[249,]    0    0    2
[250,]    0    0    1
[251,]    0    0    1
[252,]    0    0    2
[253,]    1    1    5
[254,]    0    0    7
[255,]    0    0    1
[256,]    0    0    2
[257,]    0    0    4
[258,]    0    0    3
[259,]    1    1    3
[260,]    0    0    4
[261,]    0    0    3
[262,]    0    0    1
[263,]    1    1   18
[264,]    0    0    4
[265,]    0    0    2
[266,]    1    0    1
[267,]    0    0    2
[268,]    0    0    4
[269,]    0    0    4
[270,]    0    0    2
[271,]    0    0    2
[272,]    0    0    4
[273,]    0    0    4
[274,]    0    0    1
[275,]    0    0   14
[276,]    0    0    1
[277,]    0    0    1
[278,]    0    0    1
[279,]    0    0    2
[280,]    0    0    2
[281,]    0    0    2
[282,]    0    0    4
[283,]    0    0    4
[284,]    0    0    1
[285,]    0    0    1
[286,]    0    0    1
[287,]    0    1    5
[288,]    1    1    1
[289,]    0    0    8
[290,]    1    1    3
[291,]    0    1    2
[292,]    0    0    2
[293,]    0    0   16
[294,]    0    0    3
[295,]    0    0    1
[296,]    0    1    6
[297,]    0    0    1
[298,]    0    0    3
[299,]    0    1    1
[300,]    0    0    1
[301,]    0    0    1
[302,]    0    0    6
[303,]    0    0    2
[304,]    0    0    1
[305,]    0    0    1
[306,]    0    0   14
[307,]    1    1    3
[308,]    0    0    1
[309,]    0    0    1
[310,]    0    0    5
[311,]    0    0    2
[312,]    0    0    2
[313,]    0    0    9
[314,]    0    0    1
[315,]    0    0    5
[316,]    0    0    4
[317,]    0    0    1
[318,]    0    0    1
[319,]    0    0    9
[320,]    0    0    3
[321,]    0    0    9
[322,]    0    0    1
[323,]    0    0    7
[324,]    0    0    1
[325,]    0    0    1
[326,]    0    0    1
[327,]    1    1    1
[328,]    0    0   13
[329,]    0    0    1
[330,]    0    0    3
[331,]    0    0    1
[332,]    0    0    1
[333,]    0    0    3
[334,]    0    0    1
[335,]    0    0    2
[336,]    0    0    2
[337,]    1    1    2
[338,]    0    0    1
[339,]    0    0    2
[340,]    0    0    1
[341,]    0    0    1
[342,]    1    1    1
[343,]    0    0    4
[344,]    1    0    1
[345,]    0    0    1
[346,]    0    0   51
[347,]    0    0    1
[348,]    0    0    2
[349,]    0    1    2
[350,]    0    0    1
[351,]    0    0    1
[352,]    0    0    1
[353,]    0    0    3
[354,]    0    0    1
[355,]    0    0    1
[356,]    0    0    1
[357,]    0    0    3
[358,]    1    1    7
[359,]    1    1    1
[360,]    1    1    7
[361,]    1    0    1
[362,]    0    0    2
[363,]    0    0    2
[364,]    0    0    1
[365,]    0    0    1
[366,]    0    0    1
[367,]    0    0    2
[368,]    0    1    2
[369,]    0    0    2
[370,]    0    0    2
[371,]    0    0    1
[372,]    0    0    1
[373,]    1    1    3
[374,]    1    1    1
[375,]    0    0    7
[376,]    0    0    1
[377,]    1    1    4
[378,]    0    0    1
[379,]    1    1    1
[380,]    0    0   19
[381,]    0    0    2
[382,]    0    0    3
[383,]    0    0    8
[384,]    0    0    2
[385,]    0    0    5
[386,]    1    0    2
[387,]    0    0    1
[388,]    0    0    3
[389,]    0    0   15
[390,]    0    0    8
[391,]    0    0    3
[392,]    0    0    1
[393,]    0    0    1
[394,]    0    0    2
[395,]    0    0    5
[396,]    0    0    1
[397,]    0    0    1
[398,]    0    0    1
[399,]    0    0    2
[400,]    0    0   14
[401,]    0    0    1
[402,]    0    0    5
[403,]    0    0    2
[404,]    0    0    1
[405,]    0    0    1
[406,]    0    0    2
[407,]    0    0    6
[408,]    0    0    9
[409,]    1    0    2
[410,]    1    0    1
[411,]    1    0    3
[412,]    0    0    1
[413,]    0    0    1
[414,]    0    1    1
[415,]    0    0    1
[416,]    0    0    1
[417,]    0    0    2
[418,]    0    0    4
[419,]    0    0    1
[420,]    0    0    1
[421,]    0    0    1
[422,]    0    0    5
[423,]    0    0    3
[424,]    0    0    4
[425,]    0    0    5
[426,]    0    0    1
[427,]    0    0   14
[428,]    0    0    4
[429,]    0    0    4
[430,]    0    0    3
[431,]    0    1    1
[432,]    0    1    2
[433,]    0    0    8
[434,]    0    0    1
[435,]    0    0    1
[436,]    0    0    1
[437,]    0    0    1
[438,]    0    0    8
[439,]    0    1    2
[440,]    0    0    1
[441,]    0    0    1
[442,]    0    0    1
[443,]    0    0    1
[444,]    0    0    3
[445,]    0    0    4
[446,]    0    0    2
[447,]    0    0    1
[448,]    0    0    2
[449,]    1    0    4
[450,]    0    0    1
[451,]    0    0    1
[452,]    0    0    1
[453,]    0    0    2
[454,]    0    0    1
[455,]    0    0    5
[456,]    1    1    1
[457,]    1    0    8
[458,]    0    0    1
[459,]    0    0    5
[460,]    1    1    6
[461,]    0    0   15
[462,]    0    0    1
[463,]    0    0    1
[464,]    0    0    1
[465,]    0    0    2
[466,]    0    0    1
[467,]    1    1    4
[468,]    0    0    1
[469,]    0    0    5
[470,]    0    0    1
[471,]    0    1    1
[472,]    0    1    3
[473,]    0    0   10
[474,]    0    0   11
[475,]    1    1    2
[476,]    0    0    5
[477,]    0    0    1
[478,]    0    0    3
[479,]    0    0    2
[480,]    0    0    1
[481,]    0    0    6
[482,]    0    0    5
[483,]    0    0    2
[484,]    1    0    1
[485,]    0    0    1
[486,]    0    0    1
[487,]    0    1    4
[488,]    1    1    1
[489,]    0    0    1
[490,]    1    1    2
[491,]    0    0    2
[492,]    0    0    1
[493,]    0    0    1
[494,]    0    0   23
[495,]    0    0    4
[496,]    0    0    4
[497,]    0    0    2
[498,]    0    1    3
[499,]    0    0    3
[500,]    0    0    2
> #pred_s_or_f
> #s_or_f
> 
> comparison=comparison[!is.na(comparison[,1]),]
> accuracy=sum(comparison[,1]==comparison[,2])/nrow(comparison)
> accuracy
[1] 0.914
> 
> one_one=sum((comparison[,1]==1)&(comparison[,2]==1))/sum(comparison[,2]==1)  ### P( pred=1 | true is 1)
> zero_zero=sum((comparison[,1]==0)&(comparison[,2]==0))/sum(comparison[,2]==0)  ### P( pred=0 | true is 0)
> type2=sum(comparison[,1]<comparison[,2])/nrow(comparison)
> type1=sum(comparison[,1]>comparison[,2])/nrow(comparison)
> 
> #visualization
> comparison2=cbind(comparison[,1:2],(comparison[,1]==comparison[,2])+1)
> plot(comparison2[,1],ylab="Delay(1) or not(0)",col=3,pch=19)
> points(comparison2[,2],col=comparison2[,3],pch=19)
> hist(comparison[,3], xlab="The size of similar cases", main="")
> 
> #### adjust parameter
> 
> seq(0.2,0.8,0.05)
 [1] 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80
> adjust_result=c()
> for(k in c(4:16)){
+ accuracy=sum(comparison[,k]==comparison[,2])/nrow(comparison)
+ type2=sum(comparison[,k]<comparison[,2])/nrow(comparison)
+ type1=sum(comparison[,k]>comparison[,2])/nrow(comparison)
+ one_one=sum((comparison[,k]==1)&(comparison[,2]==1))/sum(comparison[,2]==1)  ### P( pred=1 | true is 1)
+ zero_zero=sum((comparison[,k]==0)&(comparison[,2]==0))/sum(comparison[,2]==0)  ### P( pred=0 | true is 0)
+ adjust_result=rbind(adjust_result,c(accuracy,type1,type2,one_one,zero_zero))
+ }
> adjust_result=cbind(adjust_result,seq(0.2,0.8,0.05))
> 
> plot(adjust_result[,6],adjust_result[,1],lwd=2,type="l", ylim=c(0,1),xlab="Parameter", ylab="Accuracy")
> lines(adjust_result[,6],adjust_result[,2],lwd=2,col=2)
> lines(adjust_result[,6],adjust_result[,3],lwd=2,col=3,lty=2)
> lines(adjust_result[,6],adjust_result[,4],lwd=2,col=4,lty=3)
> lines(adjust_result[,6],adjust_result[,5],lwd=2,col=5,lty=4)
> 
> legend(0.65, 0.8, c("Accuracy", "Type I", "Type II", "P(F=1|A=1)","P(F=0|A=0)"), col = c(1:5),
+         lwd = c(2,2,2,2,2), lty = c(1,1,2,3,4),box.col="white"
+        , bg = "gray90")
> 
> 
> 
> 
> 
> 
> ############################ Feature Selection using similarity score##############################
> library(plyr)
> 
> y=as.numeric(as.Date(training$BL_LAST_ETA_DATETIME) < as.Date(training$POD_ATA))
> 
> #additional features
> POL_D=as.numeric(as.Date(training$POL_ETD)<as.Date(training$POL_ATD))
> num.stopby=
+   as.numeric(training$X3RD_TS_LOC!="NULL")*3+
+   as.numeric((training$X3RD_TS_LOC=="NULL")&(training$X2ND_TS_LOC!="NULL"))*2+
+   as.numeric((training$X3RD_TS_LOC=="NULL")&(training$X2ND_TS_LOC=="NULL")&(training$X1ST_TS_LOC!="NULL"))*1+
+   as.numeric((training$X3RD_TS_LOC=="NULL")&(training$X2ND_TS_LOC=="NULL")&(training$X1ST_TS_LOC=="NULL"))*0
> 
> 
> training=cbind(training,POL_D,num.stopby)
> training_y=cbind(training,y)
> 
> POL_D_v=as.numeric(as.Date(testing$POL_ETD)<as.Date(testing$POL_ATD))
> num.stopby_v=
+   as.numeric(testing$X3RD_TS_LOC!="NULL")*3+
+   as.numeric((testing$X3RD_TS_LOC=="NULL")&(testing$X2ND_TS_LOC!="NULL"))*2+
+   as.numeric((testing$X3RD_TS_LOC=="NULL")&(testing$X2ND_TS_LOC=="NULL")&(testing$X1ST_TS_LOC!="NULL"))*1+
+   as.numeric((testing$X3RD_TS_LOC=="NULL")&(testing$X2ND_TS_LOC=="NULL")&(testing$X1ST_TS_LOC=="NULL"))*0
> 
> testing=cbind(testing,POL_D=POL_D_v,num.stopby=num.stopby_v)
> 
> 
> 
> features=names(training)
> 
> similarity=function(dat){
+   y=dat$y
+   abs(sum(y==1)-sum(y==0))/length(y)
+   #max(sum(y==1),sum(y==0))/length(y)
+ }
> 
> #unique(training[,features[16]])
> res=c()
> for (m in 1:length(features)){
+   if((length(unique(training[,features[m]]))<100)&(length(unique(training[,features[m]]))>1)){
+     temp=ddply(training_y, features[m], c(similarity,nrow))		
+     res=rbind(res,c(features[m],temp$V1%*%(temp$V2/sum(temp$V2))))
+   }
+ }
> features_ordered=res[order(res[,2],decreasing = T),]
> check_list=features_ordered[1:15,1]
> 
> pdf('E:/opencode/output/visualization.pdf') # by the code below we can directly save our R file plot in disk as pdf file.
> comparison2=cbind(comparison[,1:2],(comparison[,1]==comparison[,2])+1)
> plot(comparison2[,1],ylab="Delay(1) or not(0)",col=3,pch=19)
> points(comparison2[,2],col=comparison2[,3],pch=19)
> hist(comparison[,3], xlab="The size of similar cases", main="")
> dev.off() # dev. off function is to close open plotting
pdf 
  2 
> 
> 
> seq(0.2,0.8,0.05)# this code is proceeded in the same way as done above. 
 [1] 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80
> adjust_result=c()
> for(k in c(4:16)){ 
+   accuracy=sum(comparison[,k]==comparison[,2])/nrow(comparison)
+   type2=sum(comparison[,k]<comparison[,2])/nrow(comparison)
+   type1=sum(comparison[,k]>comparison[,2])/nrow(comparison)
+   one_one=sum((comparison[,k]==1)&(comparison[,2]==1))/sum(comparison[,2]==1)  ### P( pred=1 | true is 1)
+   zero_zero=sum((comparison[,k]==0)&(comparison[,2]==0))/sum(comparison[,2]==0)  ### P( pred=0 | true is 0)
+   adjust_result=rbind(adjust_result,c(accuracy,type1,type2,one_one,zero_zero))
+ }
> adjust_result=cbind(adjust_result,seq(0.2,0.8,0.05))
> png('E:/opencode/output/adjust-parameter.part.png') # Here it is extraction of image to directly to the disk as an png file.
> plot(adjust_result[,6],adjust_result[,1],lwd=2,type="l", ylim=c(0,1),xlab="Parameter", ylab="Accuracy")
> lines(adjust_result[,6],adjust_result[,2],lwd=2,col=2)
> lines(adjust_result[,6],adjust_result[,3],lwd=2,col=3,lty=2)
> lines(adjust_result[,6],adjust_result[,4],lwd=2,col=4,lty=3)
> lines(adjust_result[,6],adjust_result[,5],lwd=2,col=5,lty=4)
> legend(0.65, 0.8, c("Accuracy", "Type I", "Type II", "P(F=1|A=1)","P(F=0|A=0)"), col = c(1:5),
+        lwd = c(2,2,2,2,2), lty = c(1,1,2,3,4),box.col="white"
+        , bg = "gray90")
> dev.off()
pdf 
  2 
> 
> 
> 
> proc.time()
   user  system elapsed 
  57.23    1.40   59.96 
